name: Deploy Go
run-name: ${{ github.actor }} deployed Go (${{ github.sha }})

on:
  push:
    branches: [ "main" ]
    paths: 
      - 'go/**'
      - '.github/workflows/deploy_go.yaml'

env:
  DOCKERHUB_REPO: ${{ vars.DOCKERHUB_USERNAME }}/challenge-flutter-go-backend

jobs:
  publish:
    runs-on: ubuntu-latest
    name: Publish image on Docker Hub
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: "./go"
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.DOCKERHUB_REPO }}:latest, ${{ env.DOCKERHUB_REPO }}:${{ github.sha }}
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs:
      - publish
    environment:
      name: production
      url: ${{ vars.URL }}
    concurrency: deploy
    steps:
      - uses: actions/checkout@v3
      - name: Set up kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
      - name: Redeploy
        run: |
          kubectl set image deployment/challenge-flutter-go-backend-deployment challenge-flutter-go-backend-deployment=${{ env.DOCKERHUB_REPO }}:${{ github.sha }} -n challenge-flutter-go
          kubectl rollout status deployment/challenge-flutter-go-backend-deployment -n challenge-flutter-go
  check_availability:
    runs-on: ubuntu-latest
    name: Check availability
    needs:
      - deploy
    environment:
      name: production
    steps:
      - name: Check availability
        run: |
          END=$((SECONDS+10))
          SUCCESS=false
          while [ $SECONDS -lt $END ]; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ vars.URL }}/health)
            if [ "$HTTP_STATUS" -eq 200 ]; then
              SUCCESS=true
              break
            fi
            sleep 1
          done
          if [ "$SUCCESS" = false ]; then
            echo "HTTP Status is not 200. Deployment failed."
            exit 1
          fi
          echo "Deployment successful. HTTP Status is 200."
