definitions:
  models.AccommodationType:
    enum:
    - hotel
    - airbnb
    - other
    type: string
    x-enum-varnames:
    - AccommodationTypeHotel
    - AccommodationTypeAirbnb
    - AccommodationTypeOther
  models.TransportType:
    enum:
    - car
    - plane
    - bus
    type: string
    x-enum-varnames:
    - TransportTypeCar
    - TransportTypePlane
    - TransportTypeBus
  models.UserRole:
    enum:
    - ADMIN
    - USER
    type: string
    x-enum-varnames:
    - UserRoleAdmin
    - UserRoleUser
  requests.AccommodationCreateBody:
    properties:
      accommodationType:
        type: string
      address:
        type: string
      bookingURL:
        type: string
      endDate:
        type: string
      name:
        type: string
      startDate:
        type: string
    required:
    - accommodationType
    - address
    - endDate
    - name
    - startDate
    type: object
  requests.AuthLoginBody:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  requests.ChatMessageCreateBody:
    properties:
      content:
        type: string
    required:
    - content
    type: object
  requests.NoteCreateBody:
    properties:
      content:
        type: string
      title:
        type: string
    required:
    - content
    - title
    type: object
  requests.TransportCreateBody:
    properties:
      endAddress:
        type: string
      endDate:
        type: string
      meetingAddress:
        type: string
      meetingTime:
        type: string
      startAddress:
        type: string
      startDate:
        type: string
      transportType:
        type: string
    required:
    - endAddress
    - endDate
    - startAddress
    - startDate
    - transportType
    type: object
  requests.TripCreateBody:
    properties:
      city:
        type: string
      country:
        type: string
      endDate:
        type: string
      name:
        maxLength: 64
        type: string
      startDate:
        type: string
    required:
    - city
    - country
    - endDate
    - startDate
    type: object
  requests.TripUpdateBody:
    properties:
      city:
        type: string
      country:
        type: string
      endDate:
        type: string
      name:
        type: string
      startDate:
        type: string
    type: object
  requests.UserCreateBody:
    properties:
      password:
        maxLength: 64
        minLength: 8
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  responses.AccommodationResponse:
    properties:
      accommodationType:
        $ref: '#/definitions/models.AccommodationType'
      address:
        type: string
      bookingURL:
        type: string
      endDate:
        type: string
      id:
        type: integer
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      startDate:
        type: string
    type: object
  responses.ChatMessageResponse:
    properties:
      author:
        $ref: '#/definitions/responses.UserResponse'
      content:
        type: string
      createdAt:
        type: string
      id:
        type: integer
    type: object
  responses.DocumentResponse:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      path:
        type: string
      title:
        type: string
      updateAt:
        type: string
    type: object
  responses.LoginResponse:
    properties:
      token:
        type: string
    type: object
  responses.NoteResponse:
    properties:
      author:
        $ref: '#/definitions/responses.UserResponse'
      content:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      title:
        type: string
      updateAt:
        type: string
    type: object
  responses.ParticipantResponse:
    properties:
      id:
        type: integer
      tripRole:
        $ref: '#/definitions/responses.ParticipantTripRole'
      username:
        type: string
    type: object
  responses.ParticipantTripRole:
    enum:
    - OWNER
    - EDITOR
    - VIEWER
    - NONE
    type: string
    x-enum-varnames:
    - ParticipantTripRoleOwner
    - ParticipantTripRoleEditor
    - ParticipantTripRoleViewer
    - ParticipantTripRoleNone
  responses.PhotoResponse:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      path:
        type: string
      title:
        type: string
      updateAt:
        type: string
    type: object
  responses.TransportResponse:
    properties:
      author:
        $ref: '#/definitions/responses.UserResponse'
      endAddress:
        type: string
      endDate:
        type: string
      id:
        type: integer
      meetingAddress:
        type: string
      meetingTime:
        type: string
      startAddress:
        type: string
      startDate:
        type: string
      transportType:
        $ref: '#/definitions/models.TransportType'
    type: object
  responses.TripParticipantsResponse:
    properties:
      participants:
        items:
          $ref: '#/definitions/responses.ParticipantResponse'
        type: array
    type: object
  responses.TripResponse:
    properties:
      city:
        type: string
      country:
        type: string
      endDate:
        type: string
      id:
        type: integer
      inviteCode:
        type: string
      name:
        type: string
      participants:
        items:
          $ref: '#/definitions/responses.ParticipantResponse'
        type: array
      startDate:
        type: string
    type: object
  responses.UserResponse:
    properties:
      id:
        type: integer
      username:
        type: string
    type: object
  responses.UserRoleReponse:
    properties:
      id:
        type: integer
      role:
        $ref: '#/definitions/models.UserRole'
      username:
        type: string
    type: object
info:
  contact:
    name: Challenge Flutter Go
    url: https://challenge-flutter-go.com
  description: This is the API for the Challenge Flutter Go project
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://challenge-flutter-go.com/terms
  title: Challenge Flutter Go API
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login the user
      parameters:
      - description: Body of the request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.AuthLoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.LoginResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      summary: Login the user
      tags:
      - auth
  /trips:
    get:
      consumes:
      - application/json
      description: Get all trips associated with the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.TripResponse'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Get all trips
      tags:
      - trips
    post:
      consumes:
      - application/json
      description: Create a new trip & associate it with the current user
      parameters:
      - description: Body of the trip
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.TripCreateBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.TripResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Create a new trip
      tags:
      - trips
  /trips/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete a trip
      tags:
      - trips
    get:
      consumes:
      - application/json
      description: Get a trip by its id
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TripResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - BearerAuth: []
      summary: Get a trip
      tags:
      - trips
    patch:
      consumes:
      - application/json
      description: Update a trip if the current has the right permissions
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      - description: Body of the trip
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.TripUpdateBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TripResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - BearerAuth: []
      summary: Update a trip
      tags:
      - trips
  /trips/{id}/accommodations:
    get:
      consumes:
      - application/json
      description: Get all accommodations associated with the trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.AccommodationResponse'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Get all accommodations from a trip
      tags:
      - accommodation
    post:
      consumes:
      - application/json
      description: Create a new accommodation associated with the trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      - description: Accommodation details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.AccommodationCreateBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.AccommodationResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Create an accommodation on a trip
      tags:
      - accommodation
  /trips/{id}/accommodations/{accommodationID}:
    delete:
      consumes:
      - application/json
      description: Delete an accommodation associated with the trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      - description: ID of the accommodation
        in: path
        name: accommodationID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete an accommodation
      tags:
      - accommodation
  /trips/{id}/banner/download:
    get:
      consumes:
      - application/json
      description: Download the banner image of a trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: A file stream of the trip banner
          schema:
            type: file
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - BearerAuth: []
      summary: Download trip banner
      tags:
      - trip
  /trips/{id}/chatMessages:
    get:
      consumes:
      - application/json
      description: Get all chat messages of the trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.ChatMessageResponse'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - BearerAuth: []
      summary: Get all chat messages of trip
      tags:
      - chatMessage
    post:
      consumes:
      - application/json
      description: Create a new chat message & associate it with the trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      - description: Body of the chat message
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.ChatMessageCreateBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.ChatMessageResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Create a new chat message on trip
      tags:
      - chatMessage
  /trips/{id}/documents:
    get:
      consumes:
      - application/json
      description: Get all documents of a trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Get all documents of a trip
      tags:
      - document
    post:
      consumes:
      - multipart/form-data
      description: Create a new document on trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      - description: Title of the document
        in: formData
        name: title
        required: true
        type: string
      - description: Description of the document
        in: formData
        name: description
        type: string
      - description: Document file
        in: formData
        name: document
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.DocumentResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Create a new document on trip
      tags:
      - document
  /trips/{id}/documents/{documentID}:
    delete:
      consumes:
      - application/json
      description: Delete a document from the trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      - description: ID of the document
        in: path
        name: documentID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete a document from trip
      tags:
      - document
  /trips/{id}/documents/{documentID}/download:
    get:
      consumes:
      - application/json
      description: Download a document
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      - description: ID of the document
        in: path
        name: documentID
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: A file stream of the document
          schema:
            type: file
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - BearerAuth: []
      summary: Download a document
      tags:
      - document
  /trips/{id}/leave:
    post:
      consumes:
      - application/json
      description: Leave a trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Leave a trip
      tags:
      - trips
  /trips/{id}/notes:
    get:
      consumes:
      - application/json
      description: Get all notes of a trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.NoteResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Get all notes of a trip
      tags:
      - note
    post:
      consumes:
      - application/json
      description: Create a new note & associate it with the trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      - description: Body of the note
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.NoteCreateBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.NoteResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Create a new note on trip
      tags:
      - note
  /trips/{id}/notes/{noteID}:
    delete:
      consumes:
      - application/json
      description: Delete a note from the trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      - description: ID of the note
        in: path
        name: noteID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete a note from trip
      tags:
      - note
  /trips/{id}/participants:
    get:
      consumes:
      - application/json
      description: List all participants of a trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TripParticipantsResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: List all participants of a trip
      tags:
      - participants
  /trips/{id}/participants/{participantId}:
    delete:
      consumes:
      - application/json
      description: Only the owner of the trip can remove a participant
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      - description: ID of the participant
        in: path
        name: participantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Remove a participant from a trip
      tags:
      - participants
  /trips/{id}/participants/{participantId}/role:
    patch:
      consumes:
      - application/json
      description: Only the owner of the trip can change the role of a participant
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      - description: ID of the participant
        in: path
        name: participantId
        required: true
        type: string
      - description: Role of the participant
        in: query
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Change the role of a participant in a trip
      tags:
      - participants
  /trips/{id}/photos:
    get:
      consumes:
      - application/json
      description: Get all photos of a trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Get all photos of a trip
      tags:
      - photo
    post:
      consumes:
      - multipart/form-data
      description: Create a new photo on trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      - description: Title of the photo
        in: formData
        name: title
        required: true
        type: string
      - description: Description of the photo
        in: formData
        name: description
        type: string
      - description: Photo file
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.PhotoResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Create a new photo on trip
      tags:
      - photo
  /trips/{id}/photos/{photoID}:
    delete:
      consumes:
      - application/json
      description: Delete a photo from the trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      - description: ID of the photo
        in: path
        name: photoID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete a photo from trip
      tags:
      - photo
  /trips/{id}/photos/{photoID}/download:
    get:
      consumes:
      - application/json
      description: Download a photo
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      - description: ID of the photo
        in: path
        name: photoID
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: A file stream of the photo
          schema:
            type: file
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - BearerAuth: []
      summary: Download a photo
      tags:
      - photo
  /trips/{id}/transports:
    post:
      consumes:
      - application/json
      description: Create a new transport & associate it with the trip
      parameters:
      - description: Body of the transport
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.TransportCreateBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.TransportResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Create a new transport on trip
      tags:
      - transport
  /trips/{id}/transports/{transportID}:
    delete:
      consumes:
      - application/json
      description: Delete a transport from a trip
      parameters:
      - description: ID of the transport
        in: path
        name: transportID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete a transport from a trip
      tags:
      - transport
  /trips/join:
    post:
      consumes:
      - application/json
      description: Join an existing trip using its inviteCode and associate it with
        the current user
      parameters:
      - description: Invite code of the trip
        in: query
        name: inviteCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TripResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Join a trip
      tags:
      - trips
  /users:
    post:
      consumes:
      - application/json
      description: Register a new user with a username and a password
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.UserCreateBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.UserRoleReponse'
        "400":
          description: Bad Request
          schema: {}
      summary: Register a new user
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get the user by his id
      parameters:
      - description: ID of the user
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserRoleReponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - BearerAuth: []
      summary: Get the user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
