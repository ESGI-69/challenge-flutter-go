definitions:
  models.TransportType:
    enum:
    - car
    - plane
    - bus
    type: string
    x-enum-varnames:
    - TransportTypeCar
    - TransportTypePlane
    - TransportTypeBus
  models.UserRole:
    enum:
    - ADMIN
    - USER
    type: string
    x-enum-varnames:
    - UserRoleAdmin
    - UserRoleUser
  requests.AuthLoginBody:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  requests.TransportCreateBody:
    properties:
      EndAddress:
        type: string
      EndDate:
        type: string
      StartAddress:
        type: string
      StartDate:
        type: string
      TransportType:
        type: string
    required:
    - EndAddress
    - EndDate
    - StartAddress
    - StartDate
    - TransportType
    type: object
  requests.TripCreateBody:
    properties:
      city:
        type: string
      country:
        type: string
      endDate:
        type: string
      name:
        type: string
      startDate:
        type: string
    required:
    - city
    - country
    - endDate
    - name
    - startDate
    type: object
  requests.UserCreateBody:
    properties:
      password:
        maxLength: 64
        minLength: 8
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  responses.LoginResponse:
    properties:
      token:
        type: string
    type: object
  responses.ParticipantResponse:
    properties:
      id:
        type: integer
      tripRole:
        $ref: '#/definitions/responses.ParticipantTripRole'
      user:
        type: string
    type: object
  responses.ParticipantTripRole:
    enum:
    - OWNER
    - EDITOR
    - VIEWER
    - NONE
    type: string
    x-enum-varnames:
    - ParticipantTripRoleOwner
    - ParticipantTripRoleEditor
    - ParticipantTripRoleViewer
    - ParticipantTripRoleNone
  responses.TransportResponse:
    properties:
      endAddress:
        type: string
      endDate:
        type: string
      id:
        type: integer
      startAddress:
        type: string
      startDate:
        type: string
      transportType:
        $ref: '#/definitions/models.TransportType'
    type: object
  responses.TripResponse:
    properties:
      city:
        type: string
      country:
        type: string
      endDate:
        type: string
      id:
        type: integer
      inviteCode:
        type: string
      name:
        type: string
      participants:
        items:
          $ref: '#/definitions/responses.ParticipantResponse'
        type: array
      startDate:
        type: string
    type: object
  responses.UserRoleReponse:
    properties:
      id:
        type: integer
      role:
        $ref: '#/definitions/models.UserRole'
      username:
        type: string
    type: object
info:
  contact:
    name: Challenge Flutter Go
    url: https://challenge-flutter-go.com
  description: This is the API for the Challenge Flutter Go project
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://challenge-flutter-go.com/terms
  title: Challenge Flutter Go API
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login the user
      parameters:
      - description: Body of the request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.AuthLoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.LoginResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      summary: Login the user
      tags:
      - auth
  /trips:
    get:
      consumes:
      - application/json
      description: Get all trips associated with the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.TripResponse'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Get all trips
      tags:
      - trips
    post:
      consumes:
      - application/json
      description: Create a new trip & associate it with the current user
      parameters:
      - description: Body of the trip
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.TripCreateBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.TripResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Create a new trip
      tags:
      - trips
  /trips/{id}:
    get:
      consumes:
      - application/json
      description: Get a trip by its id
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TripResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - BearerAuth: []
      summary: Get a trip
      tags:
      - trips
  /trips/{id}/leave:
    post:
      consumes:
      - application/json
      description: Leave a trip
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Leave a trip
      tags:
      - trips
  /trips/{id}/participants/{participantId}:
    delete:
      consumes:
      - application/json
      description: Only the owner of the trip can remove a participant
      parameters:
      - description: ID of the trip
        in: path
        name: id
        required: true
        type: string
      - description: ID of the participant
        in: path
        name: participantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Remove a participant from a trip
      tags:
      - participants
  /trips/{id}/transports:
    post:
      consumes:
      - application/json
      description: Create a new transport & associate it with the trip
      parameters:
      - description: Body of the transport
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.TransportCreateBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.TransportResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Create a new transport on trip
      tags:
      - transport
  /trips/{id}/transports/{transportID}:
    delete:
      consumes:
      - application/json
      description: Delete a transport from a trip
      parameters:
      - description: ID of the transport
        in: path
        name: transportID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete a transport from a trip
      tags:
      - transport
  /trips/{tripId}/participants/{participantId}/role:
    patch:
      consumes:
      - application/json
      description: Only the owner of the trip can change the role of a participant
      parameters:
      - description: ID of the trip
        in: path
        name: tripId
        required: true
        type: string
      - description: ID of the participant
        in: path
        name: participantId
        required: true
        type: string
      - description: Role of the participant
        in: query
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Change the role of a participant in a trip
      tags:
      - participants
  /trips/join:
    post:
      consumes:
      - application/json
      description: Join an existing trip using its inviteCode and associate it with
        the current user
      parameters:
      - description: Invite code of the trip
        in: query
        name: inviteCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TripResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerAuth: []
      summary: Join a trip
      tags:
      - trips
  /users:
    post:
      consumes:
      - application/json
      description: Register a new user with a username and a password
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.UserCreateBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.UserRoleReponse'
        "400":
          description: Bad Request
          schema: {}
      summary: Register a new user
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get the user by his id
      parameters:
      - description: ID of the user
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserRoleReponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - BearerAuth: []
      summary: Get the user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
